CREATE TABLE COMPANY (
    COMPANY_ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NAME VARCHAR(30) NOT NULL,
    DESCRIPTION VARCHAR(60),
    PRIMARY_CONTACT_ID INTEGER NOT NULL
);

CREATE TABLE ROOM (
    ROOM_ID       INTEGER PRIMARY KEY AUTOINCREMENT,
    FLOOR_NUMBER  INTEGER NOT NULL,
    SEAT_CAPACITY INTEGER NOT NULL
);

CREATE TABLE PRESENTATION (
    PRESENTATION_ID   INTEGER PRIMARY KEY AUTOINCREMENT,
    BOOKED_COMPANY_ID INTEGER NOT NULL,
    BOOKED_ROOM_ID    INTEGER NOT NULL,
    START_TIME        TIME,
    END_TIME          TIME
);

CREATE TABLE ATTENDEE (
    ATTENDEE_ID INTEGER      PRIMARY KEY AUTOINCREMENT,
    FIRST_NAME  VARCHAR (30) NOT NULL,
    LAST_NAME   VARCHAR (30) NOT NULL,
    PHONE       INTEGER,
    EMAIL       VARCHAR (30),
    VIP         BOOLEAN      DEFAULT (0)
);

CREATE TABLE PRESENTATION_ATTENDANCE (
    TICKET_ID       INTEGER PRIMARY KEY AUTOINCREMENT,
    PRESENTATION_ID INTEGER,
    ATTENDEE_ID     INTEGER
);
-------------------------------------------------------------------------
CREATE VIEW PRESENTATION_VW AS
    SELECT COMPANY.NAME AS BOOKED_COMPANY,
           ROOM.ROOM_ID AS ROOM_NUMBER,
           ROOM.FLOOR_NUMBER AS FLOOR,
           ROOM.SEAT_CAPACITY AS SEATS,
           START_TIME,
           END_TIME
      FROM PRESENTATION
           INNER JOIN
           COMPANY ON PRESENTATION.BOOKED_COMPANY_ID = COMPANY.COMPANY_ID
           INNER JOIN
           ROOM ON PRESENTATION.BOOKED_ROOM_ID = ROOM.ROOM_ID;
-----------------------------------------------------------------------------
INSERT INTO ATTENDEE (FIRST_NAME, LAST_NAME)
VALUES ('Thomas','Nield')
---- FOR MANY MUTIPLE INSERT
INSERT INTO ATTENDEE (FIRST_NAME, LAST_NAME, PHONE, EMAIL, VIP)
VALUES
('Jon', 'Skeeter',4802185842,'john.skeeter@rex.net', 1),
('Sam','Scala',2156783401,'sam.scala@gmail.com', 0),
('Brittany','Fisher',5932857296,'brittany.fisher@outlook.com', 0)

--YOU can also INSERT records using the results from a SELECT query. 
INSERT INTO ATTENDEE (FIRST_NAME, LAST_NAME, PHONE, EMAIL)
SELECT FIRST_NAME, LAST_NAME, PHONE, EMAIL
FROM SOME_OTHER_TABLE

--------------------------------------------------------------------------------
--INSERT FROM OTHER TABLE DATA
INSERT INTO ATTENDEE (FIRST_NAME, LAST_NAME, PHONE, EMAIL)
SELECT FIRST_NAME, LAST_NAME, PHONE, EMAIL
FROM SOME_OTHER_TABLE

-- THIS GIVES ERROR SINCE IT INSERT 5 WHICH IS NOT LISTED IN OTHER TABLE
--PRIMARY_CONTACT_ID) SET AS A FOREIGN KEY
INSERT INTO COMPANY (NAME, DESCRIPTION, PRIMARY_CONTACT_ID)
VALUES ('RexApp Solutions', 'A mobile app delivery service', 5)


-- THIS DOES NOT GIVE ERROR SINCE PRIMARY_CONTACT_ID IS LISTED ON THE TABLE
INSERT INTO COMPANY (NAME, DESCRIPTION, PRIMARY_CONTACT_ID)
VALUES ('RexApp Solutions', 'A mobile app delivery service', 3)

---------------------------------------------------------------------
--DETETE 'ATTENDEE TABLE' DANGEROUS 
--DELETE FROM ATTENDEE

-- DELETE NULL
DELETE FROM ATTENDEE
WHERE PHONE IS NULL
AND EMAIL IS NULL


SELECT * FROM ATTENDEE
WHERE PHONE IS NULL
AND EMAIL IS NULL


--Although not used in SQLite, on some database platforms (like MySQL) 
--the preferred way to delete all records from a table is to use TRUNCATE TABLE:
TRUNCATE TABLE ATTENDEE

--we wanted to update the EMAIL values for all records to be uppercase,
-- we could do that with this statement using the UPPER() function:
UPDATE ATTENDEE SET EMAIL = UPPER(EMAIL)


--We can also update multiple fields at once. Just separate each expression 
--after the SET keyword with a comma.
UPDATE ATTENDEE SET FIRST_NAME = UPPER(FIRST_NAME),
LAST_NAME = UPPER(LAST_NAME)


UPDATE ATTENDEE SET VIP = 1
WHERE ATTENDEE_ID IN (3,4)

--DROP TABLE followed by the name of the table you want to delete
-- (this is a dangerous statement as well because it deletes the table permanently,
-- so be careful and certain about what you are doing):
--DROP TABLE MY_UNWANTED_TABLE



-- TRY TO MAKE A HABIT TO WRITE TRANSACTION WHENEVER YOU UPDATE SOMETHING
-- IF YOU MAKE MISTAKE DURING INSIDE TRANSACTION YOU CAN DO 'ROLLBACK'

BEGIN TRANSACTION;
INSERT INTO ACCOUNT_ACTIVITY (ACCOUNT_ID,AMOUNT) VALUES (1563,-121.36);
INSERT INTO ACCOUNT_ACTIVITY (ACCOUNT_ID,AMOUNT) VALUES (121.36);

END TRANSACTION; -- OR COMMIT

-- AFTER YOU DO TRANSACTION YOU HAVE DO DELETE THAT PART USE WHERE CONDITION




2.5 - Unions
To simply append two queries (with identical fields) together, put a UNION ALL between them.

SELECT
'FEB' AS MONTH,
PRODUCT.PRODUCT_ID,
PRODUCT_NAME,
SUM(PRICE * QUANTITY) AS REV
FROM PRODUCT LEFT JOIN CUSTOMER_ORDER
ON PRODUCT.PRODUCT_ID = CUSTOMER_ORDER.PRODUCT_ID

WHERE ORDER_DATE BETWEEN '2017-02-01' AND '2017-02-28'
GROUP BY 1,2,3

UNION ALL

SELECT
'MAR' AS MONTH,
PRODUCT.PRODUCT_ID,
PRODUCT_NAME,
SUM(PRICE * QUANTITY) AS REV
FROM PRODUCT LEFT JOIN CUSTOMER_ORDER
ON PRODUCT.PRODUCT_ID = CUSTOMER_ORDER.PRODUCT_ID

WHERE ORDER_DATE BETWEEN '2017-03-01' AND '2017-03-31'
GROUP BY 1,2,3

---Using UNION instead of UNION ALL will remove duplicates, which should not be necessary in this case.

You should strive not to use unions as they often encourage bad, inefficient SQL. 
Strive to use CASE statements or other tools instead. In this example, it would have been better to do this:

2.6 - GROUP CONCAT

A neat little trick you can do on some database platforms (like SQLite, MySQL, and PostgreSQL) is the group_concat() 
aggregate function. This will concatenate all values in a column as an aggregation, and can be used in conjunction with a GROUP BY like MIN, MAX, AVG, etc.

This shows a concatenated list of values of PRODUCT_ID's ordered for each ORDER_DATE.


SELECT ORDER_DATE,
group_concat(PRODUCT_ID) as product_ids_ordered

FROM CUSTOMER_ORDER
WHERE ORDER_DATE BETWEEN '2017-02-01' AND '2017-02-28'
GROUP BY ORDER_DATE

--Putting the DISTINCT keyword inside of it will only concatenate the DISTINCT product ID's.

SELECT ORDER_DATE,
group_concat(DISTINCT PRODUCT_ID) as product_ids_ordered

FROM CUSTOMER_ORDER
WHERE ORDER_DATE BETWEEN '2017-02-01' AND '2017-02-28'
GROUP BY ORDER_DATE

---GROUP_CONCAT is a helpful function to compress the results into a single record,
in a single cell, often in a reporting context.
--Note that GROUP_CONCAT is used in MySQL and SQLite, but is often called STRING_AGG on other platforms such as Oracle,
PostgreSQL, and Microsoft SQL Server.

Exercise 1
Bring in all records for CUSTOMER_ORDER, but also bring in the total quantities ever ordered each given PRODUCT_ID and CUSTOMER_ID.
**
SELECT CUSTOMER_ORDER_ID,
CUSTOMER_ORDER.CUSTOMER_ID,
ORDER_DATE,
CUSTOMER_ORDER.PRODUCT_ID,
QUANTITY,
sum_qty

FROM CUSTOMER_ORDER
INNER JOIN
(
    SELECT CUSTOMER_ID,
    PRODUCT_ID,
    SUM(QUANTITY) AS sum_qty
    FROM CUSTOMER_ORDER
    GROUP BY 1, 2
) total_ordered

ON CUSTOMER_ORDER.CUSTOMER_ID = total_ordered.CUSTOMER_ID
AND CUSTOMER_ORDER.PRODUCT_ID = total_ordered.PRODUCT_ID

--Or if you choose to use a common table expression...

**WITH total_ordered AS (
    SELECT CUSTOMER_ID,
    PRODUCT_ID,
    SUM(QUANTITY) AS sum_qty
    FROM CUSTOMER_ORDER
    GROUP BY 1, 2
) 

SELECT CUSTOMER_ORDER_ID,
CUSTOMER_ORDER.CUSTOMER_ID,
ORDER_DATE,
CUSTOMER_ORDER.PRODUCT_ID,
QUANTITY,
sum_qty

FROM CUSTOMER_ORDER INNER JOIN total_ordered

ON CUSTOMER_ORDER.CUSTOMER_ID = total_ordered.CUSTOMER_ID
AND CUSTOMER_ORDER.PRODUCT_ID = total_ordered.PRODUCT_ID



4.5A Self Joins

--We can join a table to itself by invoking it twice with two aliases.
--This can be useful, for example, to look up the previous day's order quantity (if any) for a given CUSTOMER_ID and PRODUCT_ID:
--전날 주문 물량
***SELECT o1.CUSTOMER_ORDER_ID,
o1.CUSTOMER_ID,
o1.PRODUCT_ID,
o1.ORDER_DATE,
o1.QUANTITY,
o2.QUANTITY AS PREV_DAY_QUANTITY

FROM CUSTOMER_ORDER o1
LEFT JOIN CUSTOMER_ORDER o2

ON o1.CUSTOMER_ID = o2.CUSTOMER_ID
AND o1.PRODUCT_ID = o2.PRODUCT_ID
AND o2.ORDER_DATE = date(o1.ORDER_DATE, '-1 day') --전날 주문 물량

WHERE o1.ORDER_DATE BETWEEN '2017-03-05' AND '2017-03-11'

-- 전날이 아니라 직전 주문한 날 인경우 sub query 를 쓴다.

SELECT ORDER_DATE,
PRODUCT_ID,
CUSTOMER_ID,
QUANTITY,
(
    SELECT QUANTITY
    FROM CUSTOMER_ORDER c2
    WHERE c1.ORDER_DATE > c2.ORDER_DATE
    AND c1.PRODUCT_ID = c2.PRODUCT_ID
    AND c1.CUSTOMER_ID = c2.CUSTOMER_ID
    ORDER BY ORDER_DATE DESC  -- 역순으로 가장 최근일자 선택 모든 항목마다 각각 query가 계산됨
    LIMIT 1
) as PREV_QTY
FROM CUSTOMER_ORDER c1

4.5B Recursive Self Joins (useful when there are hierarchical data)

SELECT * FROM EMPLOYEE

ID	FIRST_NAME	LAST_NAME	TITLE	DEPARTMENT	MANAGER_ID
13	Pembroke	Killgus	Accountant I	Accounting	10
14	Harper	Argontt	Director	Operations	3
15	Fabio	Treversh	Manager	Operations	14
16	Gerard	Morforth	Analyst	Operations	15
17	Stephanus	Palatino	Senior Analyst	Operations	15
18	Jennilee	Withers	Analyst	Operations	15
19	Desdemona	Farmar	Business Consultant	Operations	15
20	Ashlin	Creamen	Manager	Operations	14
21	Daniel	Licquorish	Analyst	Operations	20

--This MANAGER_ID points to another EMPLOYEE record.
--If you want to bring in Daniel and his superior's information, this isn't hard to do with a self join.

SELECT e1.FIRST_NAME, 
e1.LAST_NAME, 
e1.TITLE,
e2.FIRST_NAME AS MANAGER_FIRST_NAME,
e2.LAST_NAME AS MANAGER_LAST_NAME

FROM EMPLOYEE e1 INNER JOIN EMPLOYEE e2
ON e1.MANAGER_ID = e2.ID

WHERE e1.FIRST_NAME = 'Daniel'

---
FIRST_NAME	LAST_NAME	TITLE	MANAGER_FIRST_NAME	MANAGER_LAST_NAME
Daniel	Licquorish	Analyst	Ashlin	Creamen


--But what if you wanted to display the entire hierarchy above Daniel? 
A recursion is a special type of common table expression (CTE). 
Typically, you "seed" a starting value and then use UNION or
UNION ALL to append the results of a query that uses each "seed", and the result becomes the next seed.

-- generates a list of employee ID's hierarchical to Daniel

WITH RECURSIVE hierarchy_of_daniel(x) AS (
 SELECT 21 -- start with Daniel's ID
 UNION ALL -- append each manager ID recursively
 SELECT MANAGER_ID 
 FROM hierarchy_of_daniel INNER JOIN EMPLOYEE
 ON EMPLOYEE.ID = hierarchy_of_daniel.x -- employee ID must equal previous recursion
)
SELECT * FROM EMPLOYEE
WHERE ID IN hierarchy_of_daniel;




--It's harder to show the hierarchy for everyone at once, but there are ways.
For instance, you can put a RECURSIVE operation in a subquery and use GROUP_CONCAT.

SELECT e1.* , 

(
    WITH RECURSIVE hierarchy_of(x) AS (
     SELECT e1.ID 
     UNION ALL -- append each manager ID recursively
     SELECT MANAGER_ID 
     FROM hierarchy_of INNER JOIN EMPLOYEE
     ON EMPLOYEE.ID = hierarchy_of.x -- employee ID must equal previous recursion
     )

    SELECT GROUP_CONCAT(ID) FROM EMPLOYEE e2
    WHERE ID IN hierarchy_of
) AS HIERARCHY_IDS

FROM EMPLOYEE e1

ID	FIRST_NAME	LAST_NAME	TITLE	DEPARTMENT	MANAGER_ID	HIERARCHY_IDS
14	Harper	Argontt	Director	Operations	3	1,3,14
15	Fabio	Treversh	Manager	Operations	14	1,3,14,15
16	Gerard	Morforth	Analyst	Operations	15	1,3,14,15,16
17	Stephanus	Palatino	Senior Analyst	Operations	15	1,3,14,15,17
18	Jennilee	Withers	Analyst	Operations	15	1,3,14,15,18
19	Desdemona	Farmar	Business Consultant	Operations	15	1,3,14,15,19

Note recursive queries also can be used to improvise a set of consecutive values without creating a table. 
For instance, we can generate a set of consecutive integers. Here is how you create a set of integers from 1 to 1000.

WITH RECURSIVE my_integers(x) AS (
    SELECT 1
        UNION ALL
    SELECT x + 1 
    FROM my_integers
    WHERE x < 1000
)
SELECT * FROM my_integers

You can apply the same concept to generate a set of chronological dates. 
This recursive query will generate all dates from today to '2030-12-31':

WITH RECURSIVE my_dates(x) AS (
    SELECT date('now')
        UNION ALL
    SELECT date(x, '+1 day')
    FROM my_dates
    WHERE x < '2030-12-31'
)
SELECT * FROM my_dates

4.6 Sometimes it can be helpful to generate a "cartesian product", 
or every possible combination between two or more data sets using a CROSS JOIN.

We should use a cross join to resolve this problem. 
For instance, we can leverage a CROSS JOIN query to generate every possible combination of PRODUCT_ID and CUSTOMER_ID.

SELECT
CUSTOMER_ID,
PRODUCT_ID
FROM CUSTOMER
CROSS JOIN PRODUCT









